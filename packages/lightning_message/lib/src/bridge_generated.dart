// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.80.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'package:collection/collection.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

abstract class LightningMessage {
  Future<bool> verify({required String message, required String signature, required String publicKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifyConstMeta;

  Future<String> recoverNodeId({required String message, required String signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRecoverNodeIdConstMeta;

  Future<Signer> fromSeedStaticMethodSigner({required U8Array64 seed, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromSeedStaticMethodSignerConstMeta;

  Future<Signer> fromLdkSeedStaticMethodSigner({required U8Array32 seed, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromLdkSeedStaticMethodSignerConstMeta;

  Future<String> signMethodSigner({required Signer that, required String message, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMethodSignerConstMeta;
}

class Signer {
  final LightningMessage bridge;
  final U8Array32 secretKeyBytes;
  final String nodeId;

  const Signer({
    required this.bridge,
    required this.secretKeyBytes,
    required this.nodeId,
  });

  static Future<Signer> fromSeed({required LightningMessage bridge, required U8Array64 seed, dynamic hint}) => bridge.fromSeedStaticMethodSigner(seed: seed, hint: hint);

  static Future<Signer> fromLdkSeed({required LightningMessage bridge, required U8Array32 seed, dynamic hint}) => bridge.fromLdkSeedStaticMethodSigner(seed: seed, hint: hint);

  Future<String> sign({required String message, dynamic hint}) => bridge.signMethodSigner(
        that: this,
        message: message,
      );
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;
  U8Array64(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array64.unchecked(Uint8List inner) : super(inner);
  U8Array64.init() : super(Uint8List(arraySize));
}

class LightningMessageImpl implements LightningMessage {
  final LightningMessagePlatform _platform;
  factory LightningMessageImpl(ExternalLibrary dylib) => LightningMessageImpl.raw(LightningMessagePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory LightningMessageImpl.wasm(FutureOr<WasmModule> module) => LightningMessageImpl(module as ExternalLibrary);
  LightningMessageImpl.raw(this._platform);
  Future<bool> verify({required String message, required String signature, required String publicKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(message);
    var arg1 = _platform.api2wire_String(signature);
    var arg2 = _platform.api2wire_String(publicKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_verify(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kVerifyConstMeta,
      argValues: [
        message,
        signature,
        publicKey
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVerifyConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "verify",
        argNames: [
          "message",
          "signature",
          "publicKey"
        ],
      );

  Future<String> recoverNodeId({required String message, required String signature, dynamic hint}) {
    var arg0 = _platform.api2wire_String(message);
    var arg1 = _platform.api2wire_String(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_recover_node_id(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kRecoverNodeIdConstMeta,
      argValues: [
        message,
        signature
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRecoverNodeIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "recover_node_id",
        argNames: [
          "message",
          "signature"
        ],
      );

  Future<Signer> fromSeedStaticMethodSigner({required U8Array64 seed, dynamic hint}) {
    var arg0 = _platform.api2wire_u8_array_64(seed);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_from_seed__static_method__Signer(port_, arg0),
      parseSuccessData: (d) => _wire2api_signer(d),
      constMeta: kFromSeedStaticMethodSignerConstMeta,
      argValues: [
        seed
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFromSeedStaticMethodSignerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "from_seed__static_method__Signer",
        argNames: [
          "seed"
        ],
      );

  Future<Signer> fromLdkSeedStaticMethodSigner({required U8Array32 seed, dynamic hint}) {
    var arg0 = _platform.api2wire_u8_array_32(seed);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_from_ldk_seed__static_method__Signer(port_, arg0),
      parseSuccessData: (d) => _wire2api_signer(d),
      constMeta: kFromLdkSeedStaticMethodSignerConstMeta,
      argValues: [
        seed
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFromLdkSeedStaticMethodSignerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "from_ldk_seed__static_method__Signer",
        argNames: [
          "seed"
        ],
      );

  Future<String> signMethodSigner({required Signer that, required String message, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_signer(that);
    var arg1 = _platform.api2wire_String(message);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sign__method__Signer(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSignMethodSignerConstMeta,
      argValues: [
        that,
        message
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignMethodSignerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sign__method__Signer",
        argNames: [
          "that",
          "message"
        ],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  Signer _wire2api_signer(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Signer(
      bridge: this,
      secretKeyBytes: _wire2api_u8_array_32(arr[0]),
      nodeId: _wire2api_String(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

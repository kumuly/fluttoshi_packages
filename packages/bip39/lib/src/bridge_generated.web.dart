// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.80.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class Bip39Platform extends FlutterRustBridgeBase<Bip39Wire> with FlutterRustBridgeSetupMixin {
  Bip39Platform(FutureOr<WasmModule> dylib) : super(Bip39Wire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<String> api2wire_StringList(List<String> raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_mnemonic(Mnemonic raw) {
    return api2wire_mnemonic(raw);
  }

  @protected
  List<dynamic> api2wire_mnemonic(Mnemonic raw) {
    return [
      api2wire_language(raw.language),
      api2wire_StringList(raw.words)
    ];
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

// Section: finalizer
}

// Section: WASM wire module

@JS('wasm_bindgen')
external Bip39WasmModule get wasmModule;

@JS()
@anonymous
class Bip39WasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external Bip39WasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_all__static_method__Language(NativePortType port_);

  external dynamic /* void */ wire_word_list__method__Language(NativePortType port_, int that);

  external dynamic /* void */ wire_words_by_prefix__method__Language(NativePortType port_, int that, String prefix);

  external dynamic /* void */ wire_find_word__method__Language(NativePortType port_, int that, String word);

  external dynamic /* void */ wire_generate_in__static_method__Mnemonic(NativePortType port_, int language, int word_count);

  external dynamic /* void */ wire_parse__static_method__Mnemonic(NativePortType port_, List<String> words);

  external dynamic /* void */ wire_parse_in__static_method__Mnemonic(NativePortType port_, int language, List<String> words);

  external dynamic /* void */ wire_to_seed__method__Mnemonic(NativePortType port_, List<dynamic> that, String passphrase);
}

// Section: WASM wire connector

class Bip39Wire extends FlutterRustBridgeWasmWireBase<Bip39WasmModule> {
  Bip39Wire(FutureOr<WasmModule> module) : super(WasmModule.cast<Bip39WasmModule>(module));

  void wire_all__static_method__Language(NativePortType port_) => wasmModule.wire_all__static_method__Language(port_);

  void wire_word_list__method__Language(NativePortType port_, int that) => wasmModule.wire_word_list__method__Language(port_, that);

  void wire_words_by_prefix__method__Language(NativePortType port_, int that, String prefix) => wasmModule.wire_words_by_prefix__method__Language(port_, that, prefix);

  void wire_find_word__method__Language(NativePortType port_, int that, String word) => wasmModule.wire_find_word__method__Language(port_, that, word);

  void wire_generate_in__static_method__Mnemonic(NativePortType port_, int language, int word_count) => wasmModule.wire_generate_in__static_method__Mnemonic(port_, language, word_count);

  void wire_parse__static_method__Mnemonic(NativePortType port_, List<String> words) => wasmModule.wire_parse__static_method__Mnemonic(port_, words);

  void wire_parse_in__static_method__Mnemonic(NativePortType port_, int language, List<String> words) => wasmModule.wire_parse_in__static_method__Mnemonic(port_, language, words);

  void wire_to_seed__method__Mnemonic(NativePortType port_, List<dynamic> that, String passphrase) => wasmModule.wire_to_seed__method__Mnemonic(port_, that, passphrase);
}

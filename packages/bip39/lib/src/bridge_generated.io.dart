// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.80.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class Bip39Platform extends FlutterRustBridgeBase<Bip39Wire> {
  Bip39Platform(ffi.DynamicLibrary dylib) : super(Bip39Wire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_Mnemonic> api2wire_box_autoadd_mnemonic(Mnemonic raw) {
    final ptr = inner.new_box_autoadd_mnemonic_0();
    _api_fill_to_wire_mnemonic(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_mnemonic(Mnemonic apiObj, ffi.Pointer<wire_Mnemonic> wireObj) {
    _api_fill_to_wire_mnemonic(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_mnemonic(Mnemonic apiObj, wire_Mnemonic wireObj) {
    wireObj.language = api2wire_language(apiObj.language);
    wireObj.words = api2wire_StringList(apiObj.words);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class Bip39Wire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bip39Wire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bip39Wire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_all__static_method__Language(
    int port_,
  ) {
    return _wire_all__static_method__Language(
      port_,
    );
  }

  late final _wire_all__static_method__LanguagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_all__static_method__Language');
  late final _wire_all__static_method__Language = _wire_all__static_method__LanguagePtr.asFunction<void Function(int)>();

  void wire_word_list__method__Language(
    int port_,
    int that,
  ) {
    return _wire_word_list__method__Language(
      port_,
      that,
    );
  }

  late final _wire_word_list__method__LanguagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_word_list__method__Language');
  late final _wire_word_list__method__Language = _wire_word_list__method__LanguagePtr.asFunction<void Function(int, int)>();

  void wire_words_by_prefix__method__Language(
    int port_,
    int that,
    ffi.Pointer<wire_uint_8_list> prefix,
  ) {
    return _wire_words_by_prefix__method__Language(
      port_,
      that,
      prefix,
    );
  }

  late final _wire_words_by_prefix__method__LanguagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>)>>('wire_words_by_prefix__method__Language');
  late final _wire_words_by_prefix__method__Language = _wire_words_by_prefix__method__LanguagePtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_find_word__method__Language(
    int port_,
    int that,
    ffi.Pointer<wire_uint_8_list> word,
  ) {
    return _wire_find_word__method__Language(
      port_,
      that,
      word,
    );
  }

  late final _wire_find_word__method__LanguagePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>)>>('wire_find_word__method__Language');
  late final _wire_find_word__method__Language = _wire_find_word__method__LanguagePtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_in__static_method__Mnemonic(
    int port_,
    int language,
    int word_count,
  ) {
    return _wire_generate_in__static_method__Mnemonic(
      port_,
      language,
      word_count,
    );
  }

  late final _wire_generate_in__static_method__MnemonicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32)>>('wire_generate_in__static_method__Mnemonic');
  late final _wire_generate_in__static_method__Mnemonic = _wire_generate_in__static_method__MnemonicPtr.asFunction<void Function(int, int, int)>();

  void wire_parse__static_method__Mnemonic(
    int port_,
    ffi.Pointer<wire_StringList> words,
  ) {
    return _wire_parse__static_method__Mnemonic(
      port_,
      words,
    );
  }

  late final _wire_parse__static_method__MnemonicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_StringList>)>>('wire_parse__static_method__Mnemonic');
  late final _wire_parse__static_method__Mnemonic = _wire_parse__static_method__MnemonicPtr.asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_parse_in__static_method__Mnemonic(
    int port_,
    int language,
    ffi.Pointer<wire_StringList> words,
  ) {
    return _wire_parse_in__static_method__Mnemonic(
      port_,
      language,
      words,
    );
  }

  late final _wire_parse_in__static_method__MnemonicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_StringList>)>>('wire_parse_in__static_method__Mnemonic');
  late final _wire_parse_in__static_method__Mnemonic = _wire_parse_in__static_method__MnemonicPtr.asFunction<void Function(int, int, ffi.Pointer<wire_StringList>)>();

  void wire_to_seed__method__Mnemonic(
    int port_,
    ffi.Pointer<wire_Mnemonic> that,
    ffi.Pointer<wire_uint_8_list> passphrase,
  ) {
    return _wire_to_seed__method__Mnemonic(
      port_,
      that,
      passphrase,
    );
  }

  late final _wire_to_seed__method__MnemonicPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Mnemonic>, ffi.Pointer<wire_uint_8_list>)>>('wire_to_seed__method__Mnemonic');
  late final _wire_to_seed__method__Mnemonic = _wire_to_seed__method__MnemonicPtr.asFunction<void Function(int, ffi.Pointer<wire_Mnemonic>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>('new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr.asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_Mnemonic> new_box_autoadd_mnemonic_0() {
    return _new_box_autoadd_mnemonic_0();
  }

  late final _new_box_autoadd_mnemonic_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_Mnemonic> Function()>>('new_box_autoadd_mnemonic_0');
  late final _new_box_autoadd_mnemonic_0 = _new_box_autoadd_mnemonic_0Ptr.asFunction<ffi.Pointer<wire_Mnemonic> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Mnemonic extends ffi.Struct {
  @ffi.Int32()
  external int language;

  external ffi.Pointer<wire_StringList> words;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.80.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_all__static_method__Language_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<Language>>(
        WrapInfo {
            debug_name: "all__static_method__Language",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(Language::all()),
    )
}
fn wire_word_list__method__Language_impl(
    port_: MessagePort,
    that: impl Wire2Api<Language> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>>(
        WrapInfo {
            debug_name: "word_list__method__Language",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Ok(Language::word_list(&api_that))
        },
    )
}
fn wire_words_by_prefix__method__Language_impl(
    port_: MessagePort,
    that: impl Wire2Api<Language> + UnwindSafe,
    prefix: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>>(
        WrapInfo {
            debug_name: "words_by_prefix__method__Language",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_prefix = prefix.wire2api();
            move |task_callback| Ok(Language::words_by_prefix(&api_that, api_prefix))
        },
    )
}
fn wire_find_word__method__Language_impl(
    port_: MessagePort,
    that: impl Wire2Api<Language> + UnwindSafe,
    word: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32>(
        WrapInfo {
            debug_name: "find_word__method__Language",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_word = word.wire2api();
            move |task_callback| Ok(Language::find_word(&api_that, api_word))
        },
    )
}
fn wire_generate_in__static_method__Mnemonic_impl(
    port_: MessagePort,
    language: impl Wire2Api<Language> + UnwindSafe,
    word_count: impl Wire2Api<WordCount> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Mnemonic>(
        WrapInfo {
            debug_name: "generate_in__static_method__Mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_language = language.wire2api();
            let api_word_count = word_count.wire2api();
            move |task_callback| Ok(Mnemonic::generate_in(api_language, api_word_count))
        },
    )
}
fn wire_parse__static_method__Mnemonic_impl(
    port_: MessagePort,
    words: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Mnemonic>(
        WrapInfo {
            debug_name: "parse__static_method__Mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_words = words.wire2api();
            move |task_callback| Ok(Mnemonic::parse(api_words))
        },
    )
}
fn wire_parse_in__static_method__Mnemonic_impl(
    port_: MessagePort,
    language: impl Wire2Api<Language> + UnwindSafe,
    words: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Mnemonic>(
        WrapInfo {
            debug_name: "parse_in__static_method__Mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_language = language.wire2api();
            let api_words = words.wire2api();
            move |task_callback| Ok(Mnemonic::parse_in(api_language, api_words))
        },
    )
}
fn wire_to_seed__method__Mnemonic_impl(
    port_: MessagePort,
    that: impl Wire2Api<Mnemonic> + UnwindSafe,
    passphrase: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>>(
        WrapInfo {
            debug_name: "to_seed__method__Mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_passphrase = passphrase.wire2api();
            move |task_callback| Ok(Mnemonic::to_seed(&api_that, api_passphrase))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<Language> for i32 {
    fn wire2api(self) -> Language {
        match self {
            0 => Language::English,
            1 => Language::Spanish,
            _ => unreachable!("Invalid variant for Language: {}", self),
        }
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<WordCount> for i32 {
    fn wire2api(self) -> WordCount {
        match self {
            0 => WordCount::Words12,
            1 => WordCount::Words15,
            2 => WordCount::Words18,
            3 => WordCount::Words21,
            4 => WordCount::Words24,
            _ => unreachable!("Invalid variant for WordCount: {}", self),
        }
    }
}
// Section: impl IntoDart

impl support::IntoDart for Language {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::English => 0,
            Self::Spanish => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Language {}
impl rust2dart::IntoIntoDart<Language> for Language {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Mnemonic {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.language.into_into_dart().into_dart(),
            self.words.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Mnemonic {}
impl rust2dart::IntoIntoDart<Mnemonic> for Mnemonic {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_all__static_method__Language(port_: MessagePort) {
        wire_all__static_method__Language_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_word_list__method__Language(port_: MessagePort, that: i32) {
        wire_word_list__method__Language_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_words_by_prefix__method__Language(port_: MessagePort, that: i32, prefix: String) {
        wire_words_by_prefix__method__Language_impl(port_, that, prefix)
    }

    #[wasm_bindgen]
    pub fn wire_find_word__method__Language(port_: MessagePort, that: i32, word: String) {
        wire_find_word__method__Language_impl(port_, that, word)
    }

    #[wasm_bindgen]
    pub fn wire_generate_in__static_method__Mnemonic(
        port_: MessagePort,
        language: i32,
        word_count: i32,
    ) {
        wire_generate_in__static_method__Mnemonic_impl(port_, language, word_count)
    }

    #[wasm_bindgen]
    pub fn wire_parse__static_method__Mnemonic(port_: MessagePort, words: JsValue) {
        wire_parse__static_method__Mnemonic_impl(port_, words)
    }

    #[wasm_bindgen]
    pub fn wire_parse_in__static_method__Mnemonic(
        port_: MessagePort,
        language: i32,
        words: JsValue,
    ) {
        wire_parse_in__static_method__Mnemonic_impl(port_, language, words)
    }

    #[wasm_bindgen]
    pub fn wire_to_seed__method__Mnemonic(port_: MessagePort, that: JsValue, passphrase: String) {
        wire_to_seed__method__Mnemonic_impl(port_, that, passphrase)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }
    impl Wire2Api<Vec<String>> for JsValue {
        fn wire2api(self) -> Vec<String> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }

    impl Wire2Api<Mnemonic> for JsValue {
        fn wire2api(self) -> Mnemonic {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            Mnemonic {
                language: self_.get(0).wire2api(),
                words: self_.get(1).wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }

    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Language> for JsValue {
        fn wire2api(self) -> Language {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
    impl Wire2Api<WordCount> for JsValue {
        fn wire2api(self) -> WordCount {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_all__static_method__Language(port_: i64) {
        wire_all__static_method__Language_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_word_list__method__Language(port_: i64, that: i32) {
        wire_word_list__method__Language_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_words_by_prefix__method__Language(
        port_: i64,
        that: i32,
        prefix: *mut wire_uint_8_list,
    ) {
        wire_words_by_prefix__method__Language_impl(port_, that, prefix)
    }

    #[no_mangle]
    pub extern "C" fn wire_find_word__method__Language(
        port_: i64,
        that: i32,
        word: *mut wire_uint_8_list,
    ) {
        wire_find_word__method__Language_impl(port_, that, word)
    }

    #[no_mangle]
    pub extern "C" fn wire_generate_in__static_method__Mnemonic(
        port_: i64,
        language: i32,
        word_count: i32,
    ) {
        wire_generate_in__static_method__Mnemonic_impl(port_, language, word_count)
    }

    #[no_mangle]
    pub extern "C" fn wire_parse__static_method__Mnemonic(port_: i64, words: *mut wire_StringList) {
        wire_parse__static_method__Mnemonic_impl(port_, words)
    }

    #[no_mangle]
    pub extern "C" fn wire_parse_in__static_method__Mnemonic(
        port_: i64,
        language: i32,
        words: *mut wire_StringList,
    ) {
        wire_parse_in__static_method__Mnemonic_impl(port_, language, words)
    }

    #[no_mangle]
    pub extern "C" fn wire_to_seed__method__Mnemonic(
        port_: i64,
        that: *mut wire_Mnemonic,
        passphrase: *mut wire_uint_8_list,
    ) {
        wire_to_seed__method__Mnemonic_impl(port_, that, passphrase)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_StringList_0(len: i32) -> *mut wire_StringList {
        let wrap = wire_StringList {
            ptr: support::new_leak_vec_ptr(<*mut wire_uint_8_list>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_mnemonic_0() -> *mut wire_Mnemonic {
        support::new_leak_box_ptr(wire_Mnemonic::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<Vec<String>> for *mut wire_StringList {
        fn wire2api(self) -> Vec<String> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Mnemonic> for *mut wire_Mnemonic {
        fn wire2api(self) -> Mnemonic {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<Mnemonic>::wire2api(*wrap).into()
        }
    }

    impl Wire2Api<Mnemonic> for wire_Mnemonic {
        fn wire2api(self) -> Mnemonic {
            Mnemonic {
                language: self.language.wire2api(),
                words: self.words.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }

    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_StringList {
        ptr: *mut *mut wire_uint_8_list,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_Mnemonic {
        language: i32,
        words: *mut wire_StringList,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_Mnemonic {
        fn new_with_null_ptr() -> Self {
            Self {
                language: Default::default(),
                words: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_Mnemonic {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.79.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'package:collection/collection.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

abstract class UnifiedMnemonic {
  Future<Mnemonic> newStaticMethodMnemonic({required Language language, required WordCount wordCount, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodMnemonicConstMeta;

  Future<Mnemonic> fromPhraseStaticMethodMnemonic({required String phrase, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFromPhraseStaticMethodMnemonicConstMeta;

  Future<U8Array64> deriveSeedMethodMnemonic({required Mnemonic that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeriveSeedMethodMnemonicConstMeta;

  Future<U8Array32> deriveLightningSeedMethodMnemonic({required Mnemonic that, required Network network, int? hardenedChildIndex, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeriveLightningSeedMethodMnemonicConstMeta;
}

/// Language to be used for the mnemonic phrase.
enum Language {
  /// The English language.
  English,

  /// The Spanish language.
  Spanish,
}

class Mnemonic {
  final UnifiedMnemonic bridge;
  final String phrase;

  /// The language the mnemonic.
  final Language language;

  const Mnemonic({
    required this.bridge,
    required this.phrase,
    required this.language,
  });

  static Future<Mnemonic> newMnemonic({required UnifiedMnemonic bridge, required Language language, required WordCount wordCount, dynamic hint}) => bridge.newStaticMethodMnemonic(language: language, wordCount: wordCount, hint: hint);

  static Future<Mnemonic> fromPhrase({required UnifiedMnemonic bridge, required String phrase, dynamic hint}) => bridge.fromPhraseStaticMethodMnemonic(phrase: phrase, hint: hint);

  Future<U8Array64> deriveSeed({dynamic hint}) => bridge.deriveSeedMethodMnemonic(
        that: this,
      );

  Future<U8Array32> deriveLightningSeed({required Network network, int? hardenedChildIndex, dynamic hint}) => bridge.deriveLightningSeedMethodMnemonic(
        that: this,
        network: network,
        hardenedChildIndex: hardenedChildIndex,
      );
}

enum Network {
  Bitcoin,
  Testnet,
  Signet,
  Regtest,
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}

class U8Array64 extends NonGrowableListView<int> {
  static const arraySize = 64;
  U8Array64(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array64.unchecked(Uint8List inner) : super(inner);
  U8Array64.init() : super(Uint8List(arraySize));
}

/// Type describing entropy length (aka word count) in the mnemonic
enum WordCount {
  /// 12 words mnemonic (128 bits entropy)
  Words12,

  /// 15 words mnemonic (160 bits entropy)
  Words15,

  /// 18 words mnemonic (192 bits entropy)
  Words18,

  /// 21 words mnemonic (224 bits entropy)
  Words21,

  /// 24 words mnemonic (256 bits entropy)
  Words24,
}

class UnifiedMnemonicImpl implements UnifiedMnemonic {
  final UnifiedMnemonicPlatform _platform;
  factory UnifiedMnemonicImpl(ExternalLibrary dylib) => UnifiedMnemonicImpl.raw(UnifiedMnemonicPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory UnifiedMnemonicImpl.wasm(FutureOr<WasmModule> module) => UnifiedMnemonicImpl(module as ExternalLibrary);
  UnifiedMnemonicImpl.raw(this._platform);
  Future<Mnemonic> newStaticMethodMnemonic({required Language language, required WordCount wordCount, dynamic hint}) {
    var arg0 = api2wire_language(language);
    var arg1 = api2wire_word_count(wordCount);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new__static_method__Mnemonic(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_mnemonic(d),
      constMeta: kNewStaticMethodMnemonicConstMeta,
      argValues: [
        language,
        wordCount
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodMnemonicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new__static_method__Mnemonic",
        argNames: [
          "language",
          "wordCount"
        ],
      );

  Future<Mnemonic> fromPhraseStaticMethodMnemonic({required String phrase, dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_from_phrase__static_method__Mnemonic(port_, arg0),
      parseSuccessData: (d) => _wire2api_mnemonic(d),
      constMeta: kFromPhraseStaticMethodMnemonicConstMeta,
      argValues: [
        phrase
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFromPhraseStaticMethodMnemonicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "from_phrase__static_method__Mnemonic",
        argNames: [
          "phrase"
        ],
      );

  Future<U8Array64> deriveSeedMethodMnemonic({required Mnemonic that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mnemonic(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_derive_seed__method__Mnemonic(port_, arg0),
      parseSuccessData: _wire2api_u8_array_64,
      constMeta: kDeriveSeedMethodMnemonicConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeriveSeedMethodMnemonicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "derive_seed__method__Mnemonic",
        argNames: [
          "that"
        ],
      );

  Future<U8Array32> deriveLightningSeedMethodMnemonic({required Mnemonic that, required Network network, int? hardenedChildIndex, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_mnemonic(that);
    var arg1 = api2wire_network(network);
    var arg2 = _platform.api2wire_opt_box_autoadd_u32(hardenedChildIndex);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_derive_lightning_seed__method__Mnemonic(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_u8_array_32,
      constMeta: kDeriveLightningSeedMethodMnemonicConstMeta,
      argValues: [
        that,
        network,
        hardenedChildIndex
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeriveLightningSeedMethodMnemonicConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "derive_lightning_seed__method__Mnemonic",
        argNames: [
          "that",
          "network",
          "hardenedChildIndex"
        ],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  Language _wire2api_language(dynamic raw) {
    return Language.values[raw as int];
  }

  Mnemonic _wire2api_mnemonic(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Mnemonic(
      bridge: this,
      phrase: _wire2api_String(arr[0]),
      language: _wire2api_language(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  U8Array64 _wire2api_u8_array_64(dynamic raw) {
    return U8Array64(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_language(Language raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_word_count(WordCount raw) {
  return api2wire_i32(raw.index);
}
// Section: finalizer
